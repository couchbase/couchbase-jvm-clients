<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.couchbase.client</groupId>
        <artifactId>couchbase-jvm-clients</artifactId>
        <version>1.16.6</version><!--REL-->
    </parent>

    <artifactId>core-io</artifactId>
    <version>3.7.6</version><!--REL-->

    <!-- Ideally, this would be like java-client and not use packaging-bundle -->
    <!-- But I haven't figured out how to run the felix plugin *after* the shading has been done, then update the MANIFEST.MF -->
    <packaging>bundle</packaging>
    <!--
     If java-example with osgi-feature gives the message below, it indicates that the indicated package is not exported (in the MANIFEST). 
     Likely because the classes were not present when the manifest was created by the felix plugin.
     Unable to resolve java-client/3.2.0.SNAPSHOT: missing requirement [java-client/3.2.0.SNAPSHOT] osgi.wiring.package; 
     filter:="(osgi.wiring.package=com.couchbase.client.core.deps.com.fasterxml.jackson.annotation)"]]
    -->
    <name>Couchbase JVM Core IO</name>
    <description>The official Couchbase JVM Core IO Library</description>

    <dependencies>
        <!-- External, Required Dependencies -->
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-core</artifactId>
            <version>${reactor.version}</version>
        </dependency>

        <dependency>
            <groupId>org.reactivestreams</groupId>
            <artifactId>reactive-streams</artifactId>
            <version>${reactive-streams.version}</version>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <!-- External, Optional Dependencies -->
        <dependency>
            <groupId>io.projectreactor.tools</groupId>
            <artifactId>blockhound</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Internal Dependencies -->
        <dependency>
            <groupId>com.couchbase.client</groupId>
            <artifactId>core-io-deps</artifactId>
            <version>${core-io-deps.version}</version>
            <!-- adding scope-provided results in the MANIFEST/* files not being included in core-io.jar <scope>provided</scope> -->
            <!-- removing scope-provided results in osgi-feature bundling believing that core-io-deps is a required module -->
            <!-- and referencing it as a wrapped bundle: wrap:mvn:com.couchbase.client/core-io-deps/1.2.0  -->
        </dependency>

        <!-- Test Dependencies -->
        <dependency>
            <groupId>io.projectreactor</groupId>
            <artifactId>reactor-test</artifactId>
            <version>${reactor.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j-slf4j-impl.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.couchbase.client</groupId>
            <artifactId>test-utils</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${maven-source-plugin.version}</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                <configuration>
                    <createSourcesJar>true</createSourcesJar>
                    <shadeSourcesContent>true</shadeSourcesContent>
                    <artifactSet>
                        <includes>
                            <include>com.couchbase.client:core-io-deps</include>
                        </includes>
                    </artifactSet>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
                                    <resources>
                                        <resource>META-INF/services/com.fasterxml.jackson.core.JsonFactory</resource>
                                        <resource>META-INF/services/com.fasterxml.jackson.core.ObjectCodec</resource>
                                        <resource>META-INF/services/com.fasterxml.jackson.databind.Module</resource>
                                    </resources>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven-javadoc-plugin.version}</version>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <source>8</source>
                            <doclint>none</doclint>
                            <quiet>true</quiet>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <links>
                        <link>https://projectreactor.io/docs/core/release/api/</link>
                    </links>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>${build-helper-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>add-integration-test-source-as-test-sources</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <!-- add the following sources in addition to the unit tests -->
                                <source>${test-source-directory}</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-integration-test-resource-as-test-resource</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>add-test-resource</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${test-resource-directory}</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <!-- Attributes like `Automatic-Module-Name` and `Implementation-Version` that would normally be set here
                         are instead set by `maven-bundle-plugin`. See the comment in that plugin config for details. -->
                    <archive>
			<!-- the MANIFEST.MF does not exist until after the felix plugin runs, and felix plugin would have to run
			 *after* this plugin to have the shaded classes for the Import/Exports -->
                        <!-- <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile> -->
                    </archive>
                </configuration>
		<!-- this would be used when not using <packaging>bundle</> see java-client/pom.xml.  
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
		-->
            </plugin>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <version>5.1.2</version>
                <extensions>true</extensions>
                <configuration>
                    <instructions>
                        <!-- The `maven-bundle-plugin` interferes with property placeholder resolution in `maven-jar-plugin`.
                             Specifically, using ${buildNumber} with `maven-jar-plugin` doesn't work when the bundle plugin is present.
                             See https://stackoverflow.com/questions/12604161/error-while-adding-svn-revision-in-jar-manifest-with-maven-and-maven-bundle-plug
                             As a workaround, declare the manifest attributes here instead, even though they are not related to bundles. -->
                        <Implementation-Version>${project.version}+${buildNumber}</Implementation-Version>
                        <Build-Time>${maven.build.timestamp}</Build-Time>
                        <Automatic-Module-Name>com.couchbase.client.core</Automatic-Module-Name>

                        <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
                        <Bundle-Version>${project.version}</Bundle-Version>
                        <Export-Package>
                            com.couchbase.client.*
                        </Export-Package>
                        <Import-Package>
                            javax.security.cert,
                            javax.naming,
                            javax.security.sasl,
                            javax.security.auth.*,
                            javax.crypto,
                            javax.crypto.*,
                            reactor.core,
                            reactor.core.*,
                            reactor.util.*,
                            org.slf4j,
                            org.slf4j.*,
                            reactor.*,
                            org.reactivestreams.*,
                            com.google.protobuf;resolution:=optional,
                            com.google.protobuf.nano;resolution:=optional
                        </Import-Package>
                        <_exportcontents>*</_exportcontents>
                    </instructions>
                </configuration>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <!-- the bundle manifest needs to be create after everything is in the jar <phase>process-classes</phase> -->
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!-- by default, add also the int tests -->
                <test-source-directory>src/integrationTest/java</test-source-directory>
                <test-resource-directory>src/integrationTest/resources</test-resource-directory>
            </properties>
        </profile>
        <profile>
            <id>unit</id>
            <activation>
                <property>
                    <name>unit</name>
                    <value>true</value>
                </property>
            </activation>
            <properties>
                <!-- just adding the unit tests again, noop. -->
                <test-source-directory>src/test/java</test-source-directory>
                <test-resource-directory>src/test/resources</test-resource-directory>
            </properties>
        </profile>
    </profiles>

</project>
